*, *::before, *::after {
  box-sizing: border-box;
}

:host {
  opacity: 0;
  pointer-events: none;
  visibility: hidden;
  position: fixed;
  left: var(--left);
  top: var(--top);
  border: 1px solid var(--cc-gray-3);
  border-radius: var(--cc-border-radius-md);
  background-color: #fff;
  box-shadow: var(--cc-box-shadow);
  --arrow-size: 9px;
}

:host([open]) {
  z-index: 2;
  opacity: 1;
  pointer-events: auto;
  visibility: visible;
  animation: scale .15s var(--cc-cubic-bezier) both;
}

/* --- Transform origin for initial bottom-ish placements */
:host([placement="bottom-start"]) {
  transform-origin: top left;
}

:host([placement="bottom-start"][reverse]) {
  transform-origin: bottom left;
}

:host([placement="bottom-center"]) {
  transform-origin: top center;
}

:host([placement="bottom-center"][reverse]) {
  transform-origin: bottom center;
}

:host([placement="bottom-end"]) {
  transform-origin: top right;
}

:host([placement="bottom-end"][reverse]) {
  transform-origin: bottom right;
}
/* --- End of transform origin for initial bottom-ish placements */

/* --- Transform origin for initial top-ish placements */
:host([placement="top-start"]) {
  transform-origin: bottom left;
}

:host([placement="top-start"][reverse]) {
  transform-origin: top left;
}

:host([placement="top-center"]) {
  transform-origin: bottom center;
}

:host([placement="top-center"][reverse]) {
  transform-origin: top center;
}

:host([placement="top-end"]) {
  transform-origin: bottom right;
}

:host([placement="top-end"][reverse]) {
  transform-origin: top right;
}
/* --- End of transform origin for initial top-ish placements */

:host::before,
:host::after {
  content: "";
  display: inline-block;
  position: absolute;
}

:host::after {
  border: var(--arrow-size) solid #0000;
  border-bottom: var(--arrow-size) solid #fff;
  top: calc(var(--arrow-size) * -2);
  left: 50%;
  transform: translateX(-50%);
  /* right: 10px; */
}

:host::before {
  border: calc(var(--arrow-size) + 1px) solid #0000;
  border-bottom: calc(var(--arrow-size) + 1px) solid var(--cc-gray-3);
  top: calc((var(--arrow-size) + 1px) * -2);
  left: 50%;
  transform: translateX(-50%);
  /* right: 9px; */
}

/* --- Start of arrow position to initial bottom-placed popover. */
/*
When inital placement is not "top", meaning it starts with bottom side,
when it's reversed, popover placement is already handled by custom properties that are generated by CalculatePosition sricpt.
Just need to update arrow position to placed at bottom of popover (pointint down).
*/
:host([reverse]:not([placement*="top"]))::after,
/*
When inital placement is "top", place arrow at the bottom.
*/
:host([placement*="top"]:not([reverse]))::after {
  top: unset;
  bottom: calc((var(--arrow-size) + 1px) * -2);
  border-bottom-color: #0000;
  border-top: calc(var(--arrow-size) + 1px) solid var(--cc-gray-3);
}

:host([reverse]:not([placement*="top"]))::before,
:host([placement*="top"]:not([reverse]))::before {
  top: unset;
  bottom: calc(var(--arrow-size) * -2);
  border-bottom-color: #0000;
  border-top: var(--arrow-size) solid #fff;
  /* How come we need this to work? */
  z-index: 2;
}
/* --- End of arrow position to initial bottom-placed popover. */

/* @TODO - tutorial */
:host([placement="bottom-start"])::after,
:host([placement="bottom-start"])::before,
:host([placement="top-start"])::after,
:host([placement="top-start"])::before {
  left: calc(var(--anchor-element-width) / 2);
}

:host([placement="bottom-end"])::after,
:host([placement="bottom-end"])::before,
:host([placement="top-end"])::after,
:host([placement="top-end"])::before {
  left: auto;
  right: calc(var(--anchor-element-width) / 2);
  transform: translateX(50%);
}

@keyframes scale {
  0% {
    transform: scale(.75);
  }
  100% {
    transform: scale(1);
  }
}

